.. _datastruct-libe-specs:

General Specs
=============

libEnsemble is primarily customized by setting options within a ``libE_specs`` dictionary or using
the ``LibeSpecs`` class. When provided as a Python class, options are validated immediately on instantiation.

.. code-block:: python

    libE_specs = {
        "comm": MPI.COMM_WORLD,
        "comms": "mpi",
        "save_every_k_gens": 1000,
        "sim_dirs_make": True,
        "ensemble_dir_path": "/scratch/ensemble",
        "profile_worker": False,
    }

.. tab-set::

    .. tab-item:: General

            "comms" [str] = ``"mpi"``:
                Manager/Worker communications mode
                Options are ``"mpi"``, ``"local"``, ``"tcp"``
            "nworkers" [int]:
                Number of worker processes to spawn (only in local/tcp modes)
            "mpi_comm" [MPI communicator] = ``MPI.COMM_WORLD``:
                libEnsemble communicator if MPI comms are being used
            "dry_run" [bool] = ``False``:
                Whether libEnsemble should immediately exit after validating all inputs
            "abort_on_exception" [bool] = ``True``:
                In MPI mode, whether to call ``MPI_ABORT`` on an exception.
                If ``False``, an exception will be raised by the manager.
            "save_every_k_sims" [int]:
                Save history array to file after every k simulated points.
            "save_every_k_gens" [int]:
                Save history array to file after every k generated points.
            "save_H_and_persis_on_abort" [bool] = ``True``:
                Whether libEnsemble should save the states of ``H`` and ``persis_info`` on
                aborting after an error.
            "worker_timeout" [int] = ``1``:
                When libEnsemble concludes and attempts to close down workers,
                the number of seconds until workers are considered timed out. Worker
                processes are then terminated.
            "kill_canceled_sims" [bool] = ``True``:
                Try to kill sims with ``"cancel_requested"`` set ``True``.
                If ``False``, the manager avoids this moderate overhead.
            "disable_log_files" [bool] = ``False``:
                Disable the creation of ``"ensemble.log"`` and ``"libE_stats.txt"``.

    .. tab-item:: Directories

        .. tab-set::

            .. tab-item:: General

                "use_workflow_dir" [bool] = ``False``:
                    Whether to place *all* log files, dumped arrays, and default ensemble-directories in a
                    separate ``workflow`` directory. Each run is suffixed with a hash.
                    If copying back an ensemble directory from another location, the copy is placed here.

                "workflow_dir_path" [str]:
                    Optional path to the workflow directory. Autogenerated in the current directory if ``use_workflow_dir``
                    is specified.

                "ensemble_dir_path" [str] = ``"./ensemble"``:
                    Path to main ensemble directory. Can serve
                    as single working directory for workers, or contain calculation directories.

                    .. code-block:: python

                        libE_specs["ensemble_dir_path"] = "/scratch/my_ensemble"

                "ensemble_copy_back" [bool] = ``False``:
                    Whether to copy back directories within ``ensemble_dir_path`` back to launch
                    location. Useful if ``ensemble_dir_path`` located on node-local storage.

                "use_worker_dirs" [bool] = ``False``:
                    Whether to organize calculation directories under worker-specific directories:

                    .. tab-set::

                        .. tab-item:: False

                            .. code-block::

                                - /ensemble_dir
                                    - /sim0-worker1
                                    - /gen1-worker1
                                    - /sim1-worker2
                                    ...

                        .. tab-item:: True

                            .. code-block::

                                - /ensemble_dir
                                    - /worker1
                                        - /sim0
                                        - /gen1
                                        - /sim4
                                        ...
                                    - /worker2
                                    ...

            .. tab-item:: Sims

                "sim_dirs_make" [bool] = ``False``:
                    Whether to make a simulation-function-call specific working directory.

                "sim_dir_copy_files" [list]:
                    Paths to files or directories to copy into each sim directory, or ensemble directory.

                "sim_dir_symlink_files" [list]:
                    Paths to files or directories to symlink into each sim directory, or ensemble directory..

                "sim_input_dir" [str]:
                    Copy this directory and its contents for each simulation-specific directory.
                    If not using calculation directories, contents are copied to the ensemble directory.

            .. tab-item:: Gens

                "gen_dirs_make" [bool] = ``False``:
                    Whether to make generator-function-call specific working directory.
                    *Each persistent generator creates a single directory*.

                "gen_dir_copy_files" [list]:
                    Paths to files or directories to copy into each gen directory, or ensemble directory.

                "gen_dir_symlink_files" [list]:
                    Paths to files or directories to symlink into each gen directory.

                "gen_input_dir" [str]:
                    Copy this directory and its contents for each generator-instance specific directory.
                    If not using calculation directories, contents are copied to the ensemble directory.

    .. tab-item:: Profiling

            "profile" [bool] = ``False``:
                Profile manager and worker logic using ``cProfile``.
            "safe_mode" [bool] = ``True``:
                Prevents user functions from overwriting internal fields, but requires
                moderate overhead.
            "stats_fmt" [dict]:
                A dictionary of options for formatting ``"libE_stats.txt"``.
                See "Formatting Options for libE_stats File" for more options.

    .. tab-item:: TCP

            "workers" [list]:
                TCP Only: A list of worker hostnames.
            "ip" [str]:
                TCP Only: IP address for Manager's system
            "port" [int]:
                TCP Only: Port number for Manager's system
            "authkey" [str]:
                TCP Only: Authkey for Manager's system
            "workerID" [int]:
                TCP Only: Worker ID number assigned to the new process.
            "worker_cmd" [list]:
                TCP Only: Split string corresponding to worker/client Python process invocation. Contains
                a local Python path, calling script, and manager/server format-fields for ``manager_ip``,
                ``manager_port``, ``authkey``, and ``workerID``. ``nworkers`` is specified normally.

    .. tab-item:: History

            "use_persis_return_gen" [bool] = ``False``:
                Adds persistent generator function H return to managers history array.

            "use_persis_return_sim" [bool] = ``False``:
                Adds persistent simulator function H return to managers history array.

            "final_fields" [list] = ``[]``:
                List of fields in H that the manager will return to persistent
                workers along with the ``PERSIS_STOP`` tag at the end of the run.

    .. tab-item:: Resources

            "disable_resource_manager" [bool] = ``False``:
                Disable the built-in resource manager, including automatic resource detection
                and/or assignment of resources to workers. ``"resource_info"`` will be ignored.

            "platform" [str]:
                Name of a :ref:`known platform<known-platforms>`, e.g., ``libE_specs["platform"] = "perlmutter_g"``
                Alternatively specify by setting the ``LIBE_PLATFORM`` environment variable.

            "platform_specs" [Platform|dict]:
                A ``Platform`` object (or dictionary) specifying :ref:`settings for a platform.<platform-fields>`.
                Fields not provided will be auto-detected. Can be set to a :ref:`known platform object<known-platforms>`.

            "num_resource_sets" [int]:
                The total number of resource sets into which resources will be divided.
                By default resources will be divided by workers (excluding
                ``zero_resource_workers``).

            "enforce_worker_core_bounds" [bool] = ``False``:
                Permit submission of tasks with a
                higher processor count than the CPUs available to the worker.
                Larger node counts are not allowed. Ignored when
                ``disable_resource_manager`` is set.

            "dedicated_mode" [bool] = ``False``:
                Disallow any resources running libEnsemble processes (manager and workers)
                from being valid targets for app submissions.

            "zero_resource_workers" [list of ints]:
                List of workers (by IDs) that require no resources. For when a fixed mapping of workers
                to resources is required. Otherwise, use ``"num_resource_sets"``.
                For use with supported allocation functions.

            "resource_info" [dict]:
                Provide resource information that will override automatically detected resources.
                The allowable fields are given below in "Overriding Auto-detection"
                Ignored if ``"disable_resource_manager"`` is set.

            "scheduler_opts" [dict]:
                Options for the resource scheduler.
                See "Scheduler Options" for more options.

.. dropdown:: Complete Class API

    .. autopydantic_model:: libensemble.specs.LibeSpecs
        :model-show-json: False
        :model-show-config-member: False
        :model-show-config-summary: False
        :model-show-validator-members: False
        :model-show-validator-summary: False
        :field-list-validators: False
        :model-show-field-summary: False

.. _known-platforms:

Known Platforms List
--------------------

.. dropdown:: ``Known_platforms``

    .. autopydantic_model:: libensemble.resources.platforms.Known_platforms
        :model-show-validator-members: False
        :model-show-validator-summary: False
        :model-show-field-summary: False
        :field-list-validators: False
        :field-show-required: False
        :field-show-default: False
        :field-show-alias: False
        :member-order:

.. _platform-fields:

Platform Fields
----------------

.. dropdown:: ``Platform Fields``

    .. autopydantic_model:: libensemble.resources.platforms.Platform
        :model-show-validator-members: False
        :model-show-validator-summary: False
        :field-list-validators: False
        :field-show-default: False
        :member-order:
        :model-show-field-summary: False

Scheduler Options
-----------------

See options for :ref:`built-in scheduler<resources-scheduler>`.

.. _resource_info:

Overriding Resource Auto-Detection
----------------------------------

Note that ``"cores_on_node"`` and ``"gpus_on_node"`` are supported for backward
compatibility, but use of ``platform_specs`` is recommended for these settings.

.. dropdown:: Resource Info Fields

    The allowable ``libE_specs["resource_info"]`` fields are::

        "cores_on_node" [tuple (int, int)]:
            Tuple (physical cores, logical cores) on nodes.

        "gpus_on_node" [int]:
            Number of GPUs on each node.

        "node_file" [str]:
            Name of file containing a node-list. Default is "node_list".

        "nodelist_env_slurm" [str]:
            The environment variable giving a node list in Slurm format
            (Default: Uses ``SLURM_NODELIST``).  Queried only if
            a ``node_list`` file is not provided and the resource manager is
            enabled.

        "nodelist_env_cobalt" [str]:
            The environment variable giving a node list in Cobalt format
            (Default: Uses ``COBALT_PARTNAME``) Queried only
            if a ``node_list`` file is not provided and the resource manager
            is enabled.

        "nodelist_env_lsf" [str]:
            The environment variable giving a node list in LSF format
            (Default: Uses ``LSB_HOSTS``) Queried only
            if a ``node_list`` file is not provided and the resource manager
            is enabled.

        "nodelist_env_lsf_shortform" [str]:
            The environment variable giving a node list in LSF short-form
            format (Default: Uses ``LSB_MCPU_HOSTS``) Queried only
            if a ``node_list`` file is not provided and the resource manager is
            enabled.

    For example::

        customizer = {cores_on_node": (16, 64),
                    "node_file": "libe_nodes"}

        libE_specs["resource_info"] = customizer

Formatting libE_stats.txt
-------------------------

The allowable ``libE_specs["stats_fmt"]`` fields are::

    "task_timing" [bool] = ``False``:
        Outputs elapsed time for each task launched by the executor.

    "task_datetime" [bool] = ``False``:
        Outputs the elapsed time and start and end time for each task launched by the executor.
        Can be used with the ``"plot_libe_tasks_util_v_time.py"`` to give task utilization plots.

    "show_resource_sets" [bool] = ``False``:
        Shows the resource set IDs assigned to each worker for each call of the user function.
