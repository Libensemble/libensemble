.. _datastruct-history-array:

history array
=============
::

    H: numpy structured array
        History to store output from gen_f/sim_f/alloc_f for each entry

Overview
--------

.. *todo check consistency of terms (e.g. history array, H, manager's history array)/unnec. repitition.

libEnsemble uses a NumPy structured array :ref:`H<datastruct-history-array>` to
store information about each point (ensemble member) processed in the ensemble.
Each entry contains multiple named fields, which can contain different data types,
including scalar and arrays.

The manager maintains the global history array for the ensemble. Each entry stores
data generated by the ``gen_f`` and then the resultant output from the ``sim_f``.

When the history array is initialized, it creates fields in ``H`` for each entry of
``gen_specs['out']`` and ``sim_specs['out']``, provided by the user. For a simple
example these fields might be::

    gen_specs['out'] = [('x', float, 2), ('theta', int)]
    sim_specs['out'] = [('f', float)]

In the example, ``x`` is a 2 dimensional co-ordinate, ``theta`` represents some
integer input parameter, and ``f`` is a scalar output of the simulation.

For ease, the ``gen_f`` and ``sim_f`` are expected to return output as NumPy
structured arrays. The names of the input fields for ``gen_f`` and ``sim_f``
must exist in the manager's history array (i.e.~ they must be output fields
from ``gen_f`` or ``sim_f``).

.. *todo what if there is an H0 - are additional fields from H0 added.


Reserved fields in history array
--------------------------------

The manager's history array also contains a number of reserved fields. These include a ``sim_id``
to globally identify the point (on the manager this is usually the same as the array index). This can be
provided by the user from the ``gen_f``, but is otherwise assigned by the manager as generated points
are received.
The reserved boolean field ``cancel_requested`` can also be set in a user function to request that
libEnsembles cancels evaluation of the point.

There are also protected fields (populated by libEnsemble) that store information about each entry.
These include boolean fields for the current scheduling status of the point (``given`` out for evaluation,
``returned`` from evaluation, and ``given_back`` to the generator). Timing fields give the
time (since the epoch) corresponding to each state, and when the point was generated. Other
protected fields include the workers on which points were generated or evaluated.

The user fields and the reserved fields together make up the final history array returned
by libEnsemble.

The full list of these reserved fields is given below.

.. *todo: separate list by protected field or field a user can set]

* ``sim_id`` [int]: Each unit of work output from ``gen_f`` must have an
  associated ``sim_id``. The generator can assign this, but users must be
  careful to ensure that points are added in order. For example, if ``alloc_f``
  allows for two ``gen_f`` instances to be running simultaneously, ``alloc_f``
  should ensure that both donâ€™t generate points with the same ``sim_id``.

* ``given`` [bool]: True if this ``gen_f`` output been given to a libEnsemble
  worker to be evaluated by a ``sim_f``.

* ``given_time`` [float]: Time this entry
  was *first* given to a worker to be evaluated by a ``sim_f``.

* ``last_given_time`` [float]: Time this entry
  was *last* given to a worker to be evaluated by a ``sim_f``.

* ``returned`` [bool]: True if this entry has been evaluated by a ``sim_f``.

* ``returned_time`` [float]: Time this entry was *last* returned from a ``sim_f``.

* ``given_back`` [bool]: True if this ``gen_f`` output been given back to a ``gen_f``
  worker after being returned from evaluation.

.. * ``given_back_time`` [float]: Time this entry
..   was *first* given back to a ``gen_f`` worker.

* ``last_given_back_time`` [float]: Time this entry
  was *last* given back to a ``gen_f`` worker.

* ``sim_worker`` [int]: libEnsemble worker that performed the ``sim_f`` evaluation.

* ``gen_worker`` [int]: libEnsemble worker that generated this entry.

* ``gen_time`` [float]: Time this entry was put into ``H`` by the manager.

* ``last_gen_time`` [float]: Time this entry was last requested by a ``gen_f``.

* ``cancel_requested`` [bool]: True if cancellation of evaluation of this
  entry was requested. This field can be set by the user in a user function.

* ``kill_sent`` [bool]: True if a kill signal has been sent to the worker evaluating this entry.

Other than ``'sim_id'`` and ``cancel_requested``, reserved fields cannot be
overwritten by user functions unless ``libE_specs['safe_mode']`` is set to ``False``.

.. warning::
  Adjusting values in protected fields may crash libEnsemble.


Example workflow updating history array
---------------------------------------

**Step 1**: The history array is initialized on the manager

The history array is initialized using the ``gen_specs['out']`` and ``sim_specs['out']``
provided by the user, in addition to reserved fields. In the figure below, only the
reserved fields: ``sim_id``, ``given`` and ``returned`` are shown for brevity.

.. figure:: ../images/history_init.png
   :scale: 40
   :align: center

|

:ref:`gen_f<api_gen_f>` and :ref:`sim_f<api_sim_f>` functions accept a local history
array as the first argument (this contains only the rows and fields sent to the function.
For new function calls these will be specified by either ``gen_specs['in']``  or
``sim_specs['in']``. For generators this may be empty.

**Step 2**: Persistent generator is called

.. image:: ../images/history_gen1.png

|

**Step 3**: Points are given out for evaluation

.. image:: ../images/history_sim1.png

|

**Step 4**: Results returned to persistent generator

.. image:: ../images/history_gen2.png

|
