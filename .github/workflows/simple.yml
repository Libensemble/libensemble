name: libE-Simple
on: [push, pull_request]
jobs:
    test-libE-simple:

        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                mpi-version: [mpich]
                python-version: [3.6, 3.7, 3.8, 3.9, '3.10']
                include:
                    - os: 'macos-latest'
                      mpi-version: 'mpich'
                      python-version: 3.8
                    - os: 'ubuntu-latest'
                      mpi-version: 'openmpi'
                      python-version: 3.8
                    # - os: 'windows-latest'
                    #   mpi-version: 'msmpi'
                    #   python-version: 3.8


        env:
            TERM: xterm-256color
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        defaults:
            run:
                shell: bash -l {0}

        steps:
        - uses: actions/checkout@v2
        - name: Setup conda - Python ${{ matrix.python-version }}
          uses: conda-incubator/setup-miniconda@v2
          with:
            activate-environment: condaenv
            miniconda-version: "latest"
            python-version: ${{ matrix.python-version }}
            channels: conda-forge
            channel-priority: flexible
            auto-update-conda: true

        - name: Force-update certifi
          run: |
            python --version
            pip install -I --upgrade certifi

        - name: Install Ubuntu compilers
          if: matrix.os == 'ubuntu-latest'
          run: conda install gcc_linux-64

        # Roundabout solution on macos for proper linking with mpicc
        - name: Install macOS compilers and older SDK
          if: matrix.os == 'macos-latest'
          run: |
            wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
            mkdir ../sdk; tar xf MacOSX10.14.sdk.tar.xz -C ../sdk
            conda install clang_osx-64=9.0.1

        - name: Install bc on Ubuntu
          if: matrix.os == 'ubuntu-latest'
          run: |
            sudo apt-get update
            sudo apt-get install bc

        - name: Install MPI, mpi4py from conda
          if: matrix.python-version != '3.10'
          run: |
            conda install ${{ matrix.mpi-version }}
            conda install mpi4py

        - name: Install MPI, mpi4py from pip
          if: matrix.python-version == '3.10'
          run: |
            conda install ${{ matrix.mpi-version }}
            pip install mpi4py

        - name: Install psutil
          run: |
            pip install psutil

        - name: Install other test dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r install/testing_requirements.txt

        - name: Find MPI, Install libEnsemble, flake8, ulimit adjust
          if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
          run: |
            python install/find_mpi.py
            mpiexec --version
            pip install -e .
            flake8 libensemble
            ulimit -Sn 10000

        - name: Find MPI, Install libEnsemble, flake8
          if: matrix.os == 'windows-latest'
          run: |
            python install/find_mpi.py
            pip install -e .
            flake8 libensemble

        - name: Run tests, Ubuntu or Windows
          if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'windows-latest' }}
          run: |
           ./libensemble/tests/run-tests.sh -z -l

        - name: Run tests, Open MPI
          if: ${{ matrix.mpi-version == 'openmpi' }}
          run: |
           ./libensemble/tests/run-tests.sh -z -l -a --oversubscribe

        - name: Run tests, macOS
          if: matrix.os == 'macos-latest'
          env:
              CONDA_BUILD_SYSROOT: /Users/runner/work/libensemble/sdk/MacOSX10.14.sdk
          run: |
            ./libensemble/tests/run-tests.sh -z -l

        - name: Merge coverage, run Coveralls
          env:
              COVERALLS_PARALLEL: true
          run: |
            mv libensemble/tests/.cov* .
            coveralls --service=github

    coveralls:
        name: Notify coveralls of all jobs completing
        needs: [test-libE-simple]
        if: always()
        runs-on: ubuntu-latest
        container: python:3-slim
        steps:
        - name: Finished
          run: |
            pip3 install --upgrade coveralls
            coveralls --finish
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
