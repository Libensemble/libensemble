name: libEnsemble-CI
on: [pull_request]
jobs:
    test-libE:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                do-balsam: [false]
                mpi-version: [mpich]
                python-version: [3.7, 3.8, 3.9, "3.10"]
                comms-type: [m, l]
                include:
                    - os: macos-latest
                      do-balsam: false
                      python-version: 3.8
                      mpi-version: 'mpich'
                      comms-type: m
                    - os: macos-latest
                      do-balsam: false
                      python-version: 3.8
                      mpi-version: 'mpich'
                      comms-type: l
                    #- os: ubuntu-latest
                    #  do-balsam: false
                    #  python-version: '3.11'
                    #  mpi-version: 'mpich'
                    #  comms-type: l
                    - os: ubuntu-latest
                      do-balsam: false
                      python-version: 3.8
                      mpi-version: 'mpich'
                      comms-type: t
                    - os: ubuntu-latest
                      do-balsam: false
                      mpi-version: 'openmpi=4.1.2'
                      python-version: 3.9
                      comms-type: l
                    - os: ubuntu-latest
                      python-version: 3.8
                      comms-type: l
                      mpi-version: 'mpich'
                      do-balsam: true
        env:
            HYDRA_LAUNCHER: 'fork'
            TERM: xterm-256color
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        defaults:
            run:
                shell: bash -l {0}

        steps:
        - uses: actions/checkout@v2
        - name: Setup conda - Python ${{ matrix.python-version }}
          uses: conda-incubator/setup-miniconda@v2
          with:
            activate-environment: condaenv
            miniconda-version: "latest"
            python-version: ${{ matrix.python-version }}
            channels: conda-forge
            channel-priority: flexible
            auto-update-conda: true

        - name: Force-update certifi
          run: |
            python --version
            pip install -I --upgrade certifi

        - name: Install Ubuntu compilers
          if: matrix.os == 'ubuntu-latest'
          run: conda install gcc_linux-64

        - name: Install postgreql
          if: matrix.do-balsam == true
          env:
              BALSAM_DB_PATH: $HOME/test-balsam
          run: |
            conda install libpq postgresql postgresql-plpython
            sudo apt-get update
            sudo apt-get install bc
            pg_ctl --version

        # Roundabout solution on macos for proper linking with mpicc
        - name: Install macOS compilers and older SDK
          if: matrix.os == 'macos-latest'
          run: |
            wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
            mkdir ../sdk; tar xf MacOSX10.14.sdk.tar.xz -C ../sdk
            conda install clang_osx-64=9.0.1

        - name: Install Octave and bc on Ubuntu
          if: matrix.os == 'ubuntu-latest' && matrix.do-balsam == false
          run: |
            sudo apt-get update
            sudo apt-get install octave
            sudo apt-get install bc

        - name: Install MPI, mpi4py from conda
          if: matrix.python-version != '3.10'
          run: |
            conda install ${{ matrix.mpi-version }}
            conda install mpi4py

        - name: Install MPI, mpi4py from pip
          if: matrix.python-version == '3.10'
          run: |
            conda install ${{ matrix.mpi-version }}
            pip install mpi4py

        - name: Install generator dependencies
          if: contains('3.7_3.8_3.9_3.10', matrix.python-version) && matrix.do-balsam == false
          run: |
            python -m pip install --upgrade pip
            conda install nlopt
            conda install scipy
            conda install superlu_dist
            conda install hypre
            conda install mumps-mpi
            conda install petsc
            conda install petsc4py
            pip install DFO-LS
            pip install dragonfly-opt

            ## The following three are required to resolve an issue a linear solve, e.g.,:
            ## https://github.com/Libensemble/libensemble/runs/5514733499?check_suite_focus=true
            #pip install torch==1.11.0
            #pip install gpytorch==1.5.0
            #pip install ax-platform==0.2.1

            pip install mpmath
            python -m pip install --upgrade git+https://github.com/mosesyhc/surmise.git@development/PCGPwM

        - name: Install other testing dependencies
          run: |
            pip install -r install/testing_requirements.txt
            pip install psutil
            pip install pyyaml

        - name: Install Tasmanian on Ubuntu
          if: matrix.os == 'ubuntu-latest' && matrix.do-balsam == false
          run: |
            pip install scikit-build packaging Tasmanian --user

        - name: Install and configure Balsam 0.5.0
          if: matrix.do-balsam == true
          env:
              BALSAM_DB_PATH: $HOME/test-balsam
          run: |
            wget https://github.com/argonne-lcf/balsam/archive/refs/tags/0.5.0.tar.gz
            mkdir ../balsam; tar xf 0.5.0.tar.gz -C ../balsam;
            python install/configure_balsam_install.py

        - name: Modify Balsam for testing, create DB
          if: matrix.do-balsam == true
          env:
              BALSAM_DB_PATH: $HOME/test-balsam
          run: |
            pg_ctl --version
            balsam init $HOME/test-balsam
            sudo chmod -R 700 $HOME/test-balsam/balsamdb
            source balsamactivate test-balsam
            python -c 'from libensemble.tests.regression_tests.common import modify_Balsam_pyCoverage; modify_Balsam_pyCoverage()'
            python -c 'from libensemble.tests.regression_tests.common import modify_Balsam_settings; modify_Balsam_settings()'

        - name: Find MPI, Install libEnsemble, flake8, ulimit adjust
          run: |
            python install/find_mpi.py
            mpiexec --version
            pip install -e .
            flake8 libensemble
            ulimit -Sn 10000

        - name: Activate API unit test if using mpich
          if: matrix.mpi-version == 'mpich'
          run: |
            mv libensemble/tests/unit_tests/mpich-only_test_api.py libensemble/tests/unit_tests/test_alt_api.py

        - name: Run extensive tests, Ubuntu, Python 3.7-3.10
          if: matrix.os == 'ubuntu-latest' && matrix.do-balsam == false && contains('3.7_3.8_3.9_3.10', matrix.python-version)
          run: |
           ./libensemble/tests/run-tests.sh -e -A "-W error" -z -${{ matrix.comms-type }}

        #- name: Run simple tests, Ubuntu, Python 3.11
        #  if: matrix.python-version == '3.11'
        #  run: |
        #   ./libensemble/tests/run-tests.sh -A "-W error" -z -${{ matrix.comms-type }}

        - name: Run extensive tests, macOS
          if: matrix.os == 'macos-latest'
          env:
              CONDA_BUILD_SYSROOT: /Users/runner/work/libensemble/sdk/MacOSX10.14.sdk
          run: |
            ./libensemble/tests/run-tests.sh -e -A "-W error" -z -${{ matrix.comms-type }}

        - name: Run Balsam test, Ubuntu
          if: matrix.do-balsam == true
          env:
              BALSAM_DB_PATH: $HOME/test-balsam
          run: |
           source balsamactivate test-balsam
           ./libensemble/tests/run-tests.sh -re -y 'test_balsam*' -z -l

        - name: Merge coverage, run Coveralls
          env:
              COVERALLS_PARALLEL: true
          run: |
            mv libensemble/tests/.cov* .
            coveralls --service=github

    coveralls:
        name: Notify coveralls of all jobs completing
        needs: [test-libE]
        if: always()
        runs-on: ubuntu-latest
        container: python:3-slim
        steps:
        - name: Finished
          run: |
            pip3 install --upgrade coveralls
            coveralls --finish
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    spellcheck:
        name: Spellcheck release branch
        if: contains(github.base_ref, 'main')
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        - uses: crate-ci/typos@v1.0.4
