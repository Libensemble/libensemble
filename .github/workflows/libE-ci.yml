name: libEnsemble-CI
on: [push, pull_request]
jobs:
    test-libE:

        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-16.04, macos-latest]
                python-version: [3.6, 3.7, 3.8, 3.9]
                comms-type: [m, l, t]
                exclude:
                    - os: macos-latest
                      python-version: 3.6
                    - os: macos-latest
                      python-version: 3.7

        env:
            HYDRA_LAUNCHER: 'fork'
            TERM: xterm-256color
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        defaults:
            run:
                shell: bash -l {0}

        steps:
        - uses: actions/checkout@v2
        - name: Setup conda - Python ${{ matrix.python-version }}
          uses: conda-incubator/setup-miniconda@v2
          with:
            activate-environment: condaenv
            miniconda-version: "latest"
            python-version: ${{ matrix.python-version }}
            channels: conda-forge
            channel-priority: flexible
            auto-update-conda: true

        - name: Install Ubuntu compilers
          if: matrix.os == 'ubuntu-16.04'
          run: conda install gcc_linux-64

        # Roundabout solution on macos for proper linking with mpicc
        - name: Install macOS compilers and older SDK
          if: matrix.os == 'macos-latest'
          run: |
            wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
            mkdir ../sdk; tar xf MacOSX10.14.sdk.tar.xz -C ../sdk
            conda install clang_osx-64=9.0.1

        - name: Install Octave and bc on Ubuntu
          if: matrix.os == 'ubuntu-16.04'
          run: |
            sudo apt-get update
            sudo apt-get install octave
            sudo apt-get install bc

        - name: Install nlopt, scipy, mpich, mpi4py, blas, psutil
          run: |
            conda install nlopt
            conda install scipy
            conda install mpich
            conda install mpi4py
            conda install libblas libopenblas psutil

        - name: Install with-batch PETSc and petsc4py
          if: matrix.python-version == 3.8
          env:
            PETSC_CONFIGURE_OPTIONS: '--with-batch'
          run: conda install petsc4py

        - name: Install mumps-mpi, PETSc, petsc4py
          if: matrix.python-version != 3.8
          run: |
            conda install mumps-mpi
            conda install petsc
            conda install petsc4py

        - name: Install DFO-LS, mpmath, deap, other test dependencies
          run: |
            python -m pip install --upgrade pip
            pip install DFO-LS
            pip install mpmath
            pip install deap
            pip install flake8
            pip install coverage
            pip install pytest
            pip install pytest-cov
            pip install pytest-timeout
            pip install mock
            pip install coveralls

        - name: Install Tasmanian on Ubuntu
          if: matrix.os == 'ubuntu-16.04'
          run: |
            pip install scikit-build packaging Tasmanian --user

        - name: Find MPI, Install libEnsemble, flake8, ulimit adjust
          run: |
            python install/find_mpi.py
            mpiexec --version
            pip install -e .
            flake8 libensemble
            ulimit -Sn 10000

        - name: Run tests, Ubuntu
          if: matrix.os == 'ubuntu-16.04'
          run: |
           ./libensemble/tests/run-tests.sh -A "-W error" -z -${{ matrix.comms-type }}

        # Uncomment the following 2 lines to enable tmate debug sessions
        # - name: SSH to GitHub Actions
        #   uses: P3TERX/ssh2actions@main

        - name: Run tests, macOS
          if: matrix.os == 'macos-latest'
          env:
              CONDA_BUILD_SYSROOT: /Users/runner/work/libensemble/sdk/MacOSX10.14.sdk
          run: |
            ./libensemble/tests/run-tests.sh -A "-W error" -z -${{ matrix.comms-type }}

        - name: Merge coverage, run Coveralls
          env:
              COVERALLS_PARALLEL: true
          run: |
            mv libensemble/tests/.cov* .
            coveralls --service=github

    coveralls:
        name: Notify coveralls of all jobs completing
        needs: test-libE
        if: always()
        runs-on: ubuntu-16.04
        container: python:3-slim
        steps:
        - name: Finished
          run: |
            pip3 install --upgrade coveralls
            coveralls --finish
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
